name: Build
on:
  push:
    paths:
      - '*.c'
      - '*.cpp'
      - '*.h'
      - 'Android.mk'
      - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build-native:
    name: Build native libraries (armeabi-v7a & arm64-v8a) and verify symbol
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        abi: [ "arm64-v8a", "armeabi-v7a" ]
    env:
      NDK_VERSION_DIR: "24.0.8215888"
      NDK_ARCHIVE_NAME: "android-ndk-r24-linux.zip"
      CMDLINE_TOOLS_ARCHIVE: "commandlinetools-linux-12700392_latest.zip"
      PLATFORM_TOOLS_ARCHIVE: "platform-tools-latest-linux.zip"
      APP_PLATFORM: "android-21"
      CHECK_SYMBOL: "_ZN7android13GraphicBufferC1Ejjij"
      APP_BUILD_SCRIPT: "Android.mk"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl wget python3

      - name: Download and install Android SDK commandline tools, platform-tools and NDK
        run: |
          set -euxo pipefail
          export ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$HOME"
          curl -fL "https://dl.google.com/android/repository/${{ env.CMDLINE_TOOLS_ARCHIVE }}" -o cmdline.zip
          unzip -q cmdline.zip -d "$ANDROID_SDK_ROOT"
          rm -f cmdline.zip
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools" ] && [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
              mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
            else
              mv "$ANDROID_SDK_ROOT/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools_tmp" || true
              mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
              mv "$ANDROID_SDK_ROOT/cmdline-tools_tmp"/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
            fi
          fi
          curl -fL "https://dl.google.com/android/repository/${{ env.PLATFORM_TOOLS_ARCHIVE }}" -o platform-tools.zip
          unzip -q platform-tools.zip -d "$ANDROID_SDK_ROOT"
          rm -f platform-tools.zip
          mkdir -p "$ANDROID_SDK_ROOT/ndk"
          curl -fL "https://dl.google.com/android/repository/${{ env.NDK_ARCHIVE_NAME }}" -o ndk.zip || true
          if [ -f ndk.zip ]; then
            unzip -q ndk.zip -d "$ANDROID_SDK_ROOT/ndk"
            rm -f ndk.zip
            if [ -d "$ANDROID_SDK_ROOT/ndk/android-ndk-r24" ]; then
              mv "$ANDROID_SDK_ROOT/ndk/android-ndk-r24" "$ANDROID_SDK_ROOT/ndk/${NDK_VERSION_DIR}" || true
            fi
          fi
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          if [ -d "$ANDROID_SDK_ROOT/ndk/${NDK_VERSION_DIR}" ]; then
            echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${NDK_VERSION_DIR}" >> $GITHUB_ENV
          else
            echo "ANDROID_NDK_HOME=" >> $GITHUB_ENV
          fi

      - name: Ensure sdkmanager exists and accept licenses
        run: |
          set -euxo pipefail
          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-$HOME/android-sdk}"
          SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMANAGER" ]; then
            SDKMANAGER="$(command -v sdkmanager || true)"
          fi
          if [ -x "$SDKMANAGER" ]; then
            yes | "$SDKMANAGER" --licenses || true
          fi

      - name: Show environment
        run: |
          set -euxo pipefail
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          echo "ANDROID_NDK_HOME=${ANDROID_NDK_HOME:-<unset>}"
          echo "APP_PLATFORM=${APP_PLATFORM}"
          echo "Matrix ABI: ${{ matrix.abi }}"
          ls -la "${ANDROID_SDK_ROOT}" || true
          ls -la "${ANDROID_NDK_HOME:-/dev/null}" || true

      - name: Build native (ndk-build) for ${{ matrix.abi }}
        env:
          ABI: ${{ matrix.abi }}
          APP_PLATFORM: ${{ env.APP_PLATFORM }}
        run: |
          set -euxo pipefail
          if [ -z "${ANDROID_NDK_HOME:-}" ] || [ ! -x "${ANDROID_NDK_HOME}/ndk-build" ]; then
            echo "ERROR: ANDROID_NDK_HOME is not properly set or ndk-build not found" >&2
            exit 1
          fi
          "${ANDROID_NDK_HOME}/ndk-build" NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=${APP_BUILD_SCRIPT} APP_ABI=${ABI} APP_PLATFORM=${APP_PLATFORM} V=1

      - name: Verify produced .so files and check for symbol ${CHECK_SYMBOL}
        run: |
          set -euxo pipefail
          OUTDIR_LIBS="libs/${{ matrix.abi }}"
          OUTDIR_OBJ="obj/local/${{ matrix.abi }}"
          if [ -d "$OUTDIR_LIBS" ]; then
            DIR="$OUTDIR_LIBS"
          elif [ -d "$OUTDIR_OBJ" ]; then
            DIR="$OUTDIR_OBJ"
          else
            echo "No output directory for ABI=${{ matrix.abi }}" >&2
            exit 1
          fi
          FOUND=0
          for so in "$DIR"/*.so; do
            [ -e "$so" ] || continue
            if readelf -Ws "$so" | grep -F "${CHECK_SYMBOL}" >/dev/null 2>&1; then
              FOUND=1
            elif readelf -Ds "$so" | grep -F "${CHECK_SYMBOL}" >/dev/null 2>&1; then
              FOUND=1
            fi
          done
          if [ "$FOUND" -ne 1 ]; then
            echo "Symbol ${CHECK_SYMBOL} not found for ABI=${{ matrix.abi }}" >&2
            exit 1
          fi

      - name: Upload artifacts (built .so files)
        uses: actions/upload-artifact@v4
        with:
          name: native-binaries-${{ matrix.abi }}
          path: |
            libs/${{ matrix.abi }}/*.so
            obj/local/${{ matrix.abi }}/*.so
